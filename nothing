## vendor/bin/phpunit --bootstrap tests/bootstrap.php tests

## rm -rf vendor/**/.git
## find vendor/ -type d -name ".git" -exec rm -rf {} \;

## 一个文件每行末尾增加一个相同的字符串，如 ","
## vim :%s/$/,

## 替换文件中所有关键词
## vim :%s/vipclub/new_word/g
## 
## 
## sed  's/req=//g'

## mac 

#alias killdns = "sudo killall -HUP mDNSResponder && sudo killall mDNSResponderHelper && sudo dscacheutil -flushcache";

# sudo killall -HUP mDNSResponder
# sudo killall mDNSResponderHelper
# sudo dscacheutil -flushcache

## 封 80
# iptables -A INPUT -p tcp --dport 80 -j DROP

## 开 80
# iptables -A INPUT -p tcp --dport 80 -j ACCEPT

## 查看规则
# iptables -L -nv

## 全清掉了
# iptables -F 
# 或者清空具体的某行，获取行号，用 -D 参数
# iptables -L -n --line-numbers 
# iptables -D INPUT 1

## 添加 
##  chmod u+w /etc/sudoers
# cat /etc/sudoers
## 编辑 visudo — edit the sudoers file


## ssh-keygen -t rsa -C "xxxx@staff.com" -b 4096
## ssh-keygen -t rsa -C "aieruishi@gmail.com" -b 4096 
## Code Line Statistics Tool
# cloc .


#看系统日志
# vim /var/log/messages
# 看内核日志
# dmesg
# tail -f /var/log/message
# tail -f /var/log/boot.log
##删除占用文件句柄的僵尸进程
#lsof /data1 | grep deleted  | awk '{print $2}' | xargs kill -9
## for i in `ls`; do mv -f $i `echo "15_"$i`; done
## diff release git diff --name-status 1.0.0.1643 1.0.0.1645
## git diff 1.0.0.1643 1.0.0.1645
## git shortlog -e 1.0.0.1643...1.0.0.1645
## for file in `ls`; do goplantuml ./$file > ./$file/diagram.puml ; done;
## 查看端口被哪个进程监听 sudo lsof -i :端口
## 查看进程监听的端口 sudo lsof -nP -p 进程号 | grep LISTEN 或者 sudo lsof -nP | grep LISTEN | grep 进程号
## 查看监听端口的进程 sudo lsof -nP | grep LISTEN | grep 端口号


# 查看60分钟内的log
# find . -mmin -60
## install base dev
## sudo yum -y install gcc gcc-c++ autoconf automake make

## find ./ -name ".zip" | xargs rm -rfv

## git commit 修改提交 msg  git 
## git commit --amend
## 修改网关
## route add -net 0.0.0.0 netmask 0.0.0.0 gw 10.75.15.1
## ethtool -i eth0

## SSH 自动断线 无相应问题
## vim /etc/ssh/sshd_config
## ClientAliveInterval 30 // 每隔多少秒，服务器端向客户端发送心跳
## ClientAliveCountMax 6 // 多少次心跳无响应之后，会认为Client已经断开

## git upstream
## git clone git@github.com:aierui/talent-plan.git
## git remote add upstream git@github.com:pingcap/talent-plan.git
## git remote set-url --push upstream no_push // Never push to upstream master since you do not have write access.
## git remote -v  // Confirm that your remotes make sense:
## git fetch upstream
## git checkout master
## git rebase upstream/master
## git checkout -b develop
## develop,debug,test and so on.
## Keep your branch in sync 
## While on your myfeature branch.
## git fetch upstream
## git rebase upstream/master
## add and commit and push to origin develop

## delete remote branch (fork project)
## git push origin --delete  training-4.0

## by vimdiff two view
## git difftool training-4.0 upstream/master  tidb-server/main.go

## sudo /bin/chmod +a 'user:yixiao:allow write' /etc/hosts
